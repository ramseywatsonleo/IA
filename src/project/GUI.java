package project;


import java.awt.BorderLayout;
import java.awt.Font;

import javax.swing.*;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;

import javax.imageio.ImageIO;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 *
 * @author ramse
 */
public class GUI extends JFrame {

    File Artifact = null;
	
    public GUI(File artifact) throws IOException {
    	
    	Artifact = artifact;
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @throws IOException 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() throws IOException {

        
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jSplitPane1 = new JSplitPane();
        jSplitPane2 = new JSplitPane();
        jSplitPane3 = new JSplitPane();
        jSplitPane4 = new JSplitPane();
        jSplitPane5 = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        jSplitPane6 = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        jSplitPane7 = new JSplitPane();
        jSplitPane8 = new JSplitPane();
        jSplitPane9 = new JSplitPane();
        
        jTextField1 = new JTextArea(11, 1);
        jButton1 = new JButton();
        jButton2 = new JButton();
        jButton3 = new JButton();
        jButton4 = new JButton();
        jButton5 = new JButton();
        jButton6 = new JButton();
        documentImage = new ImageIcon();
        
        GUI gui = this;
        
        
        Font font = new Font("Times New Roman", Font.BOLD, 20);
        
        
        File[] folders = Artifact.listFiles();
        
        artifacts = folders[0].listFiles();
        
        documents  = folders[1].listFiles();
        
        notes = folders[2];


       

        
        
        setTitle(Artifact.getName());
        setLayout(new BorderLayout());
        
        jPanel1 = new JPanel(new BorderLayout(0, 0));

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1920, 1080));
        



        
        
        
        

        
        
        
        artImage = ImageIO.read(artifacts[0]);
        
        heightScaleFactor = artImage.getHeight() / 680.0;
   
        artifactImage = new ImageIcon();
        artifactImage.setImage(artImage);
        artifactImage.setImage(artifactImage.getImage().getScaledInstance((int)(artifactImage.getIconWidth() / heightScaleFactor),
        		(int)(artifactImage.getIconHeight() / heightScaleFactor), Image.SCALE_SMOOTH));
        jLabel2.setIcon(artifactImage);
        
        
        
        
        artImage2 = null;
        artifactImage2 = null;
        if (artifacts.length >= 2) {
	        artImage2 = ImageIO.read(artifacts[1]);
	        
	        heightScaleFactor = artImage2.getHeight() / 680.0;
	        
	        artifactImage2 = new ImageIcon();
	        artifactImage2.setImage(artImage2);
	        artifactImage2.setImage(artifactImage2.getImage().getScaledInstance((int)(artifactImage2.getIconWidth() / heightScaleFactor),
	        		(int)(artifactImage2.getIconHeight() / heightScaleFactor), Image.SCALE_SMOOTH));
	        
	        jLabel3.setIcon(artifactImage2);
	        
	        
        }
        
        
        docImage = ImageIO.read(documents[0]);
        
        heightScaleFactor = docImage.getHeight() / 680.0;
        
        
        documentImage.setImage(docImage);
        documentImage.setImage(documentImage.getImage().getScaledInstance((int)(documentImage.getIconWidth() / heightScaleFactor),
        		(int)(documentImage.getIconHeight() / heightScaleFactor), Image.SCALE_SMOOTH));
        
        jLabel1.setIcon(documentImage);
        
        
        
        
        
        if (artifacts.length >= 2 && (artifactImage.getIconWidth() + artifactImage2.getIconWidth() + documentImage.getIconWidth()) > 1920) {
        	//double imgRatio = (double)img2.getWidth(null) / (double)img3.getWidth(null);
        	scaleFactor = (double) (artifactImage.getIconWidth() + artifactImage2.getIconWidth()) / (double) (1920 - documentImage.getIconWidth()); 
        	artifactImage.setImage(artifactImage.getImage().getScaledInstance((int)(artifactImage.getIconWidth() / scaleFactor),
            		(int)(artifactImage.getIconHeight() / scaleFactor), Image.SCALE_SMOOTH));
        	artifactImage2.setImage(artifactImage2.getImage().getScaledInstance((int)(artifactImage2.getIconWidth() / scaleFactor),
	        		(int)(artifactImage2.getIconHeight() / scaleFactor), Image.SCALE_SMOOTH));
        	
        }
        
        

        
        String path = notes.getPath();
        
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        
        
        jTextField1.setText(new String(encoded, StandardCharsets.US_ASCII));

        jTextField1.setFont(font);
        
        
        
        gui.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				FileWriter fileWriter;
				try {
					fileWriter = new FileWriter(notes);
					fileWriter.write(jTextField1.getText());
				    fileWriter.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			    
                gui.dispose();
                System.exit(0);
            }
        });
        
        

        jPanel1.add(jSplitPane6);


        jSplitPane7.setDividerLocation(documentImage.getIconWidth() / 2);
        jSplitPane7.setEnabled(true);
        jSplitPane7.setLeftComponent(jButton1);
        jSplitPane7.setRightComponent(jButton4);
        
        if (artifacts.length >= 2) {
	        jSplitPane8.setDividerLocation(artifactImage2.getIconWidth() / 2);
	        jSplitPane8.setEnabled(true);
	        jSplitPane8.setLeftComponent(jButton2);
	        jSplitPane8.setRightComponent(jButton5);
        }
        
        
        jSplitPane9.setDividerLocation(artifactImage.getIconWidth() / 2);
        jSplitPane9.setEnabled(true);
        jSplitPane9.setLeftComponent(jButton3);
        jSplitPane9.setRightComponent(jButton6);
        

        jSplitPane6.setDividerLocation(750);
        jSplitPane6.setEnabled(true);
        jSplitPane6.setTopComponent(jSplitPane5);
        jSplitPane6.setBottomComponent(jTextField1);
        

        jSplitPane5.setEnabled(true);
        jSplitPane5.setTopComponent(jSplitPane1);
        jSplitPane5.setBottomComponent(jSplitPane2);
        
        
        jSplitPane1.setDividerLocation(documentImage.getIconWidth());
        jSplitPane1.setEnabled(true);
        jSplitPane1.setLeftComponent(jLabel1);
        jSplitPane1.setRightComponent(jSplitPane3);
        
        
        jSplitPane3.setDividerLocation(1920 - documentImage.getIconWidth() - artifactImage.getIconWidth());
        jSplitPane3.setEnabled(true);
        if (artifacts.length >= 2) {
        	jSplitPane3.setLeftComponent(jLabel3);
        }
        else {
        	jSplitPane3.setLeftComponent(null);
        }
        jSplitPane3.setRightComponent(jLabel2);
        
        
        jSplitPane2.setDividerLocation(documentImage.getIconWidth());
        jSplitPane2.setEnabled(true);
        jSplitPane2.setLeftComponent(jSplitPane7);
        jSplitPane2.setRightComponent(jSplitPane4);
        
        
        jSplitPane4.setDividerLocation(1920 - documentImage.getIconWidth() - artifactImage.getIconWidth());
        jSplitPane4.setEnabled(true);
        if (artifacts.length >= 2) {
	        jSplitPane4.setLeftComponent(jSplitPane8);
	        
        }
        else {
        	jSplitPane4.setLeftComponent(null);
        }
        jSplitPane4.setRightComponent(jSplitPane9);
        
        
        jButton1.setText("Change image");

        jButton2.setText("Change image");
        
        jButton3.setText("Change image");
        
        jButton4.setText("Enlarge image");

        jButton5.setText("Enlarge image");
        
        jButton6.setText("Enlarge image");
        
        
        
        jButton1.addActionListener(new ActionListener() {
        	
        	public void actionPerformed(ActionEvent e) {
        		Menu docMenu = null;
				try {
					docMenu = new Menu(gui, 1);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		docMenu.setVisible(true);
        	}

			
        	
        });
        
        
        jButton2.addActionListener(new ActionListener() {
        	
        	public void actionPerformed(ActionEvent e) {
        		Menu artMenu = null;
				try {
					artMenu = new Menu(gui, 2);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		artMenu.setVisible(true);
        	}

			
        	
        });
        
        
        jButton3.addActionListener(new ActionListener() {
        	
        	public void actionPerformed(ActionEvent e) {
        		Menu artMenu = null;
				try {
					artMenu = new Menu(gui, 3);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		artMenu.setVisible(true);
        	}

			
        	
        });
        
        
        
        
        jButton4.addActionListener(new ActionListener() {
        	
        	public void actionPerformed(ActionEvent e) {
        		Enlargement enlarge = null;
        		ImageIcon icon = (ImageIcon) jLabel1.getIcon();
				try {
					enlarge = new Enlargement(icon.getImage());
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		enlarge.setVisible(true);
        	}

			
        	
        });
        
        
        jButton5.addActionListener(new ActionListener() {
        	
        	public void actionPerformed(ActionEvent e) {
        		Enlargement enlarge = null;
        		ImageIcon icon = (ImageIcon) jLabel3.getIcon();
				try {
					enlarge = new Enlargement(icon.getImage());

				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		enlarge.setVisible(true);
        	}

			
        	
        });
        
        
        jButton6.addActionListener(new ActionListener() {
        	
        	public void actionPerformed(ActionEvent e) {
        		Enlargement enlarge = null;
        		ImageIcon icon = (ImageIcon) jLabel2.getIcon();
				try {
					enlarge = new Enlargement(icon.getImage());

				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		enlarge.setVisible(true);
        	}

			
        	
        });
        
        
        add(jPanel1);


    
    

    pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     * @throws IOException 
     */
    
    
    
    public void setDocImage(ImageIcon img) {
    	
    	

    	jLabel1.setIcon(img);
    	
    }
    
    public void setArtImage1(ImageIcon img) {
    	
    	

    	jLabel3.setIcon(img);
    	
    }

    public void setArtImage2(ImageIcon img) {
	
	

    	jLabel2.setIcon(img);
	
}
    
    
    
    
    
    
    
    
    public static void main(String args[]) throws IOException {
        
    

    	
    	
    	
    	MainMenu main = new MainMenu();
    	main.setVisible(true);

        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify                     
    
    private static JLabel jLabel1;
    private static JLabel jLabel2;
    private static JLabel jLabel3;
    
    private JButton jButton1;
    private JButton jButton2;
    private JButton jButton3;
    
    private JButton jButton4;
    private JButton jButton5;
    private JButton jButton6;
    
    static JPanel jPanel1;

    
    private JSplitPane jSplitPane1;
    private JSplitPane jSplitPane2;
    private JSplitPane jSplitPane3;
    private JSplitPane jSplitPane4;
    private JSplitPane jSplitPane5;
    private JSplitPane jSplitPane6;
    private JSplitPane jSplitPane7;
    private JSplitPane jSplitPane8;
    private JSplitPane jSplitPane9;
    
    private JTextArea jTextField1;
    
    static ImageIcon documentImage;
    static BufferedImage docImage;
    
    static ImageIcon artifactImage;
    static BufferedImage artImage;
    
    static ImageIcon artifactImage2;
    static BufferedImage artImage2;
    
    static double heightScaleFactor;
    
    static double scaleFactor;
    
    
    
    static File[] artifacts;
    
    static File[] documents;
    
    File notes;

    // End of variables declaration                   

   

}